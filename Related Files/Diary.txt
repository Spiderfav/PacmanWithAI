------ Term 1 ------
Week 1:

- During this week, I spent most of the time just researching all the techologies I needed to use for my project. These included the algorithms I am going to use as well as the technology needed to complete this project. 
- I have settled on using Golang as my main programming language as it is fast and efficient but, I still have Python in mind if anything goes wrong.
- I have made a list of all the things I need to research:
    - Pathfinding algorithms such as: Dijkstras, A*, Greedy 
    - How to implement Q learning algorithms for the final product
    - How to get a visual, game like interface in Golang to display the maze (using ebitten)


Week 2:

- In this week I had a go at making small programs in golang to get to grips on how to approach this language. 
    - As it is not exactly an object oriented language, trying to implement some ideas in an object oriented way is proving to be more difficult than expected.
- I have also discovered that there are many implementations of maze generating algorithms in golang to be used as packages as well as Pathfinding algorithms
    - This means I can maybe use their implementations and compare them to mine to check how efficient each is when running on the mazes created


Week 3:

- This week, I have begun working on the project and creating the maze graphically. The plan is to at least have a maze by the end of the week.
    - Proving to be more of a challenge than expected as the "ebitten" package that I'm using contains little to no documentation on how to properly use it
    - I am having to figure out how to draw each square on the screen and have it in a way that each square knows its neighbours (so that an algorithm like DFS can be applied to it and a maze created)
    - I have now created the grid for the maze, next part is figuring out how to create a maze from it using DFS


Week 4:

- This week I wanted to already have started on implementing Pathfinding algorithms. However, I had to re-write my implementation for mostly everything so that maze generation algorithms could work.
- However, this week I have:
    - Created the maze generation algorithm (Randomised DFS)
    - Implemented the maze generation algorithm (Randomised DFS) on a given maze grid
    - Created function to generate the maze from a given grid
    - After generation the maze is now stored so that at a later date, the contents can be emptied to a file and reloaded as needed for testing the same maze
        - I have also attached a photo of one of the generations of the maze


Week 5:

- This week, I implemented the Dijkstras algorithm on the mazes.
- Every time the algorithm is run, a shortest path is produced from the start square to the given square.
    - Note: While testing, two opposite corners have been given to calculate the biggest distance.


- TO DO THIS WEEK: Draw the path taken from the start node to the end node?

Week 6:

- I have implemented a drawing function with lines for Dijkstras. It works for the most part but when backtracking, produces some interesting things.
- I remodeled the same drawing function to just simple Dots and number for the user to see the path it took to get to the destination.
- It now also draws to the screen the Start and End node and the distance to get there.
- I created a function that calculates the euclidean distance between two points
- A crude method of A* was also implemented, however it crashes sometimes for an unknown reason.
- Both drawing methods are now both called, each with different colours to see the effects of running each algorithm, i.e which has shortest path.

Week 7:

- Changed the current implementation of the A* algorithm 
    . In the the implementation in week 6, I wasn't storing the values of the nodes and distances correctly and so they ended up being overwritten
    . The revised version for some reason is performing as well as Dijkstras

- Updated the A* function once again to have the correct comparison and the implementation of it now works as expected.
- Created a function that outputs the best path in each algorithm
- Created a time function that outputs the time taken for each algorithm to perform
- Added functionality to output the algorithms to screen without restarting as well as the blank algorithm

Week 8:

- Added a way to change between different sized graphs with each maze search algorithm
- Added a function that can add weights to the graph. Now, as the Randomised DFS graph only produces one graph, it just means that the nodes with weights will be checked last.
- TODO: New Maze Generation algorithm
- TODO: Function to convert Maze to Weighted Graph

Week 9:

- Seperated various functions and files into their own modules and objects
- Added more documentation in accordance to the Golang Specification for every function, module and object
- Added various testing and benchamarking functions including:
    - AbsolutePath
    - A*
    - Dijkstras
    - Randomised DFS

------ Term 2 ------

Week 1:

- Changed the maze algorithm such that multiple paths can be made
- Added a main menu when a user launches the program
- Added buttons to change the size of the maze
- Added buttons to change the algorithm applied to the maze

Week 2:

- Changed the way MazeSquares are defined to be smaller in size
- Created a way to save and load of mazes for the program
- Created a method to randomly add weights to the maze
- Created a method to show the weights on the graph.

Weeks 3 and 4:

- Created Ghosts and Character behaviours
- Updated Ghosts to independatly follow Pacman
- Simplified maze code and draw code to be less taxing on CPU
- Created functions to draw the Ghosts and Pacman to screen
- Commented out unused draw functions
- Added async function to draw sprites
- Added context to Ghosts to be able to be started and stopped each time maze size changes

Week 5:

- Changed the draw functions to show the path of the ghost taking on screen
- Begun updating the A* function to simplify code, however, the work had to be scrapped as it was not working properly
    I will need to change the code later on, but I will do it when all the functionality has been made

Week 6:

- Created the reflex agent
- Added pellots for pacman to collect
- Added score for pacman depending on pellots
- Allowed the ghosts to spawn depending on the maze size

Week 7:

- Created MiniMax agents
    . Both Pacman and the Ghosts have been implemented
    . Evaluation functions have been created for each position
    . Have created way to allow for Alpha-Beta pruning when later implemented

Week 8:

- Added Alpha-Beta pruning to MiniMax agents
- Added the option to use MiniMax with or without pruning
- Added various comments to functions:
    . Draw functions have been simplified and Commented
    . File operations have comments
    . Maze objects and Game code have been Commented
    . buttons
    . Character object
    . Player object
    . Npc object

- Fixed a bug where the ghosts were stuck recalculating the same path (added a cooldown to recalculate a new path)
- Fixed A* randomly crashing during certain paths
- Added a way to restart the game if every pellot has been collected
- Fixed the ghosts following old paths when the maze has restarted
- TODO: Simplify A* and Dijkstras (maybe implement priority queue)

Week 9:

- Implemented BFS algorithm
- Changed the whole implementation of the code to use a variable of square size instead of a constant
- Added colours to pacman and ghosts
- Simplified Randomised DFS algorithm to use simpler terms

Week 10:

- Created a priority queue for Dijkstras and A* to use
- Added super pellots, pellots with more points to the maze
- Implemented Dijkstras using priority queue
- Created a path reconstruction function to reverse the path taken to the goal and get shortest path
    . It is based on the AbsolutePath implementation
- Implemented A* using priority queue
- Changed the game window size to detect the screen size and create the game window to the screen
- Added comments to the new functions for A* and Dijkstras
- Fixed MiniMax bugs
- Implemented a crude Expectimax (implementation may be wrong)
- Created buttons to change the algorithm the ghosts will use

- TODO: Check Expectimax implementation. Should it use randomness?

Week 11:

- Added buttons to create and delete ghosts from the map
    . Adding too many at a time and letting it run = Memory Leak :D
- Improved Reflex to use improved reflexes according to the game map
    . Less pellots = Go for pacman
    . Near pacman = go for him
- Fixed Dijkstras improving shortest path (It was basically using A* without heuristic)
- Used a function to check memory allocation of functions
- Removed unused functions and objects and properties from objects
- Added even more comments!
- Added a button to hide the trail that the ghosts make showing their path (can be toggled on)
